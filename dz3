def read(input_file):
    with open(input_file, 'r') as f:
        return [[int(i) for i in line.strip().split(',')] for line in f]


def winner(n1, n2, votes):
    reversed_votes = list(reversed(votes))
    f_last_index = -1
    s_last_index = -1
    if n1 in reversed_votes:
        f_last_index = reversed_votes.index(n1)
    if n2 in reversed_votes:
        s_last_index = reversed_votes.index(n2)
    if f_last_index > s_last_index:
        return n1
    elif s_last_index > f_last_index:
        return n2
    else:
        return 0


def compares(n1, n2, data):
    vote_counts = {n1: 0, n2: 0, 0: 0}
    for votes in data:
        current_winner = winner(n1, n2, votes)
        vote_counts[current_winner] += 1
    if vote_counts[n1] > vote_counts[n2]:
        return n1
    elif vote_counts[n1] < vote_counts[n2]:
        return n2
    else:
        return 0


def calculate(votes):
    max_value = max(max(sublist) for sublist in votes)
    results = [[1]]
    for num in range(2, max_value + 1):
        for index in range(len(results)):
            group = results[index]
            comparison_results = [compares(num, item, votes) for item in group]
            if all(result == 0 for result in comparison_results):
                results[index].append(num)
                break
            elif all(result != num for result in comparison_results):
                results.insert(index, [num])
                break
            elif all(result == num for result in comparison_results):
                if index == len(results) - 1:
                    results.append([num])
                    break
            else:
                raise Exception()
    results.reverse()
    length = len(results)
    i = 0
    while i < length - 1:
        current_group = results[i]
        pos = length - 1
        while pos > i:
            should_collapse = False
            for current_item in current_group:
                for target_item in results[pos]:
                    if compares(target_item, current_item, votes) != current_item:
                        should_collapse = True
                        break
                if should_collapse:
                    break
            if should_collapse:
                for j in range(pos, i, -1):
                    results[i].extend(results[j])
                results = results[:i + 1] + results[pos + 1:]
                break
            pos -= 1
        results[i].sort()
        i += 1
        length = len(results)

    return results


def write(output_file, result):
    with open(output_file, 'w') as f:
        res = ','.join(
            str(item[0]) if len(item) == 1 else str(item)
            for item in result
        ).replace(' ', '')
        f.write(res)


def main(input_file):
    data = read(input_file)
    result = calculate(data)
    write('result.txt', result)


if __name__ == '__main__':
    main('input.csv')
